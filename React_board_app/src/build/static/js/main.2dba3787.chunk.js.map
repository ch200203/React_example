{"version":3,"sources":["service/BoardService.js","components/ListBoardComponent.jsx","components/HeaderComponent.jsx","components/FooterComponent.jsx","components/CreateBoradComponent.jsx","components/ReadBoardComponent.jsx","App.js","reportWebVitals.js","index.js"],"names":["BOARD_API_BASE_URL","p_num","axios","get","board","console","log","JSON","stringify","post","no","put","delete","ListBoardComponent","props","state","paging","boards","createBoard","bind","BoardService","getBoard","this","then","res","data","setState","pagingData","currentPageNum","list","history","push","pageNum","i","pageNumStart","pageNumEnd","map","page","className","onClick","listBoard","toString","prev","tableindex","next","tabIndex","pageNumCountTotal","href","readBoard","title","memberNo","createdTime","updateTime","likes","counts","aria-label","isMoveToFirstPage","isPagingPrev","viewPaging","isPagingNext","isMoveToLastPage","Component","HeaderComponent","FooterComponent","pros","CreateBoardComponent","changeTypeHandler","event","type","target","value","changeTitleHandler","changeContentsHandler","contents","changeMemberNoHandler","preventDefault","updateBoard","match","params","getOneBoard","getTitle","placeholder","name","onChange","cancel","style","marginLeft","ReadBoardComponent","goToUpdate","deleteView","a","window","confirm","deletBoard","status","alert","typeNo","cTime","uTime","returnBoardType","readOnly","returnDate","goToList","App","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2dba3787.chunk.js","sourcesContent":["import axios from 'axios'; // axios 사용 정의\r\n\r\n//Spring boot 통신 url 정의\r\n//const BOARD_API_BASE_URL = \"http://localhost:8080/api/board\";\r\nconst BOARD_API_BASE_URL = \"http://54.180.115.65:8080/api/board\"; // 서버 올릴때\r\n\r\nclass BoardService {\r\n    getBoard(p_num) {\r\n        return axios.get(BOARD_API_BASE_URL + \"?p_num=\" + p_num);\r\n    }\r\n\r\n    createBoard(board) {\r\n        console.log(\"createBoard :: \" + JSON.stringify(board));\r\n        return axios.post(BOARD_API_BASE_URL, board);\r\n    }\r\n\r\n    getOneBoard(no){\r\n        return axios.get(BOARD_API_BASE_URL + \"/\" + no);\r\n    }\r\n\r\n    updateBoard(no, board){\r\n        return axios.put(BOARD_API_BASE_URL + \"/\" + no, board);\r\n    }\r\n\r\n    deletBoard(no){\r\n        return axios.delete(BOARD_API_BASE_URL + \"/\" + no);\r\n    }\r\n}\r\n\r\n\r\nexport default new BoardService();","import React, { Component } from 'react';\r\nimport BoardService from '../service/BoardService';\r\n\r\n\r\nclass ListBoardComponent extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        // # 1. 페이지에 표시될 극목록 데이터를 넣기위한 변수 boards를 this.state에 선언한다.\r\n\r\n        this.state = {\r\n            p_num : 1,\r\n            paging : {},\r\n            boards : [],\r\n        }\r\n        // 글 작성버튼 클릭시 동작하는 함수 바인딩\r\n        this.createBoard = this.createBoard.bind(this);\r\n    }\r\n\r\n    // 리액트의 생명주기 메소드인 'componentDidMount'에서 'BoardService'의 메소드를 호출해서 데이터를 가져온다.\r\n    // this.state에 선언한 변수의 값을 변경하기 위해선 setState를 사용해야함.\r\n    componentDidMount(){\r\n        BoardService.getBoard(this.state.p_num).then((res) => {\r\n            console.log(\"data :: \" + JSON.stringify(res.data));\r\n            this.setState({\r\n                p_num : res.data.pagingData.currentPageNum,\r\n                paging : res.data.pagingData,\r\n                boards : res.data.list\r\n            });\r\n        });\r\n    }\r\n\r\n    // 글 작성 페이지로 이동하는 함수 정의\r\n    createBoard() {\r\n        this.props.history.push('/create-board/_create');\r\n    }\r\n\r\n    readBoard(no) {\r\n        this.props.history.push(`/read-board/${no}`); // 작은 따옴 표가 아니라 그레이브 악센트\r\n    }\r\n\r\n    listBoard(p_num){\r\n        console.log(\"PageNum : \" + p_num);\r\n        BoardService.getBoard(p_num).then((res) => {\r\n            console.log(res.data);\r\n\r\n            this.setState({\r\n                 p_num : res.data.pagingData.currentPageNum,\r\n                 paging : res.data.pagingData,\r\n                 boards : res.data.list\r\n            });\r\n        });\r\n    }\r\n\r\n    viewPaging() {\r\n        const pageNum = [];\r\n\r\n        for(let i = this.state.paging.pageNumStart; i <= this.state.paging.pageNumEnd; i++){\r\n            pageNum.push(i);\r\n        }\r\n\r\n        return (pageNum.map((page) => \r\n            <li className=\"page-item\" key={page.toString()}>\r\n                <a className=\"page-link\" onClick={() => this.listBoard(page)}>{page}</a>\r\n            </li>\r\n        ));\r\n    }\r\n\r\n    isPagingPrev()  {\r\n        if(this.state.paging.prev){\r\n            return (\r\n            <li className=\"page-item\">\r\n                <a className=\"page-link\" onClick={() => this.listBoard(this.state.paging.currentPageNum - 1)} tableindex=\"-1\">Previous</a>\r\n            </li>\r\n            );\r\n        }\r\n    }\r\n\r\n    isPagingNext(){\r\n        if(this.state.paging.next){\r\n            return (\r\n            <li className=\"page-item\">\r\n                <a className=\"page-link\" onClick={() => this.listBoard(this.state.paging.currentPageNum + 1)} tableindex=\"-1\">Next</a>\r\n            </li>\r\n            );\r\n        }\r\n    }\r\n    \r\n    isMoveToFirstPage() {\r\n        if (this.state.p_num != 1) {\r\n            return (\r\n                <li className=\"page-item\">\r\n                    <a className=\"page-link\" onClick = {() => this.listBoard(1)} tabIndex=\"-1\">Move to First Page</a>\r\n                </li>\r\n            );\r\n        }\r\n    }\r\n\r\n    isMoveToLastPage() {\r\n        if (this.state.p_num != this.state.paging.pageNumCountTotal) {\r\n            return (\r\n                <li className=\"page-item\">\r\n                    <a className=\"page-link\" onClick = {() => this.listBoard( (this.state.paging.pageNumCountTotal) )} tabIndex=\"-1\">LastPage({this.state.paging.pageNumCountTotal})</a>\r\n                </li>\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n    // render() 함수의 내용이 실제 웹페이지에 표시된다.\r\n    // maps() 함수를 사용하여 board의 데이터를 출력.\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2 className=\"text-center\">Boards List</h2>\r\n                <div className=\"row\">\r\n                    <button className=\"btn btn-primary\" onClick={this.createBoard}>글 작성</button>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <table className=\"table table-striped table-bordered\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>글 번호</th>\r\n                                <th>타이틀 </th>\r\n                                <th>작성자 </th>\r\n                                <th>작성일 </th>\r\n                                <th>갱신일 </th>\r\n                                <th>좋아요 수 </th>\r\n                                <th>조회수</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                this.state.boards.map(\r\n                                    board => \r\n                                    <tr key = {board.no}>\r\n                                        <td> {board.no} </td>\r\n                                        {/* <td> <a href=\" \" onClick = {() => this.readBoard(board.no)}>{board.title} </a></td> href=\"#  을 넣어 주어야 오류가 안생김 */}\r\n                                        <td> <a href= \" \" onClick = {() => this.readBoard(board.no)}> {board.title} </a></td> {/*href=\"# \" 을 넣어 주어야 오류가 안생김*/}\r\n                                        <td> {board.memberNo} </td>\r\n                                        <td> {board.createdTime} </td>\r\n                                        <td> {board.updateTime} </td>\r\n                                        <td> {board.likes} </td>\r\n                                        <td> {board.counts} </td>\r\n                                    </tr>\r\n                                )\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <nav aria-label=\"Page navigation exam\">\r\n                        <ul className=\"pagination justify-content-center\">\r\n                            {\r\n                                this.isMoveToFirstPage()\r\n                            }\r\n                            {\r\n                                this.isPagingPrev()\r\n                            }\r\n                            {\r\n                                this.viewPaging()\r\n                            }\r\n                            {\r\n                                this.isPagingNext()\r\n                            }\r\n                            {\r\n                                this.isMoveToLastPage()\r\n                            }\r\n                        </ul>\r\n                    </nav>\r\n                </div>\r\n            </div>\r\n           \r\n        );\r\n    }\r\n}\r\n\r\nexport default ListBoardComponent;","import React, { Component } from 'react';\r\n\r\nclass HeaderComponent extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <nav className =\"navbar navbar-expand-md navbar-dark bg-dark\">\r\n                    <div><a href=\"localhost:3000\" className=\"navbar-brand\">Board-FullStack-App</a></div>\r\n                </nav>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HeaderComponent;","import React, { Component } from 'react';\r\n\r\nclass FooterComponent extends Component {\r\n    constructor(pros){\r\n        super(pros)\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <footer className=\"footer\">\r\n                    <span className=\"text-muted\">Strated 2021</span>\r\n                </footer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FooterComponent;","import React, { Component } from 'react';\r\nimport BoardService from '../service/BoardService';\r\n\r\nclass CreateBoardComponent extends Component {\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            no : this.props.match.params.no,\r\n            type : '',\r\n            title : '',\r\n            contents : '',\r\n            memberNo : ''\r\n        }\r\n        // form 양식에 값이 입력되면 this.state 에 정의 된 변수의 값을 변경하도록 바인딩\r\n        this.changeTypeHandler = this.changeTypeHandler.bind(this);\r\n        this.changeTitleHandler = this.changeTitleHandler.bind(this);\r\n        this.changeContentsHandler = this.changeContentsHandler.bind(this);\r\n        this.changeMemberNoHandler = this.changeMemberNoHandler.bind(this);\r\n        // save 버튼 클릭 시 Rest Api에 글작성 리퀘스트 보내는 함수 선언\r\n        this.createBoard = this.createBoard.bind(this);\r\n    }\r\n\r\n    // this.setState로 this.state에 정의된 변수 값을 대입\r\n    changeTypeHandler = (event) => {\r\n        this.setState({type : event.target.value});\r\n    }\r\n\r\n    changeTitleHandler = (event) => {\r\n        this.setState({title : event.target.value});\r\n    }\r\n\r\n    changeContentsHandler = (event) => {\r\n        this.setState({contents : event.target.value});\r\n    }\r\n\r\n    changeMemberNoHandler = (event) => {\r\n        this.setState({memberNo : event.target.value});\r\n    }\r\n\r\n    // Save 버튼 클릭시 Restful API 에 글 작성 request 전달\r\n    createBoard = (event) => {\r\n        event.preventDefault();       \r\n        let board = {\r\n            type : this.state.type,\r\n            title : this.state.title,\r\n            contents : this.state.contents,\r\n            memberNo : this.state.memberNo\r\n        };\r\n\r\n        console.log(\"board => \" + JSON.stringify(board));   \r\n        \r\n        if(this.state.no === \"_create\"){    \r\n            BoardService.createBoard(board).then(res => {\r\n                this.props.history.push('/board');\r\n            });\r\n        } else {\r\n            BoardService.updateBoard(this.state.no, board).then(res => {\r\n                this.props.history.push('/board');\r\n            });\r\n        }\r\n    }\r\n\r\n    cancel() {\r\n        this.props.history.push('/board');\r\n    }\r\n\r\n    getTitle() {\r\n        if(this.state.no === '_create'){\r\n            return <h3 className=\"text-center\">새글을 작성해 주세요</h3>\r\n        } else {\r\n            return <h3 className=\"text-center\">{this.state.no}번 글을 수정 합니다.</h3>\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if(this.state.no === \"_create\"){\r\n            console.log(\"new from\");\r\n            return;\r\n\r\n        } else {\r\n            BoardService.getOneBoard(this.state.no).then(res => {\r\n                let board = res.data;\r\n                console.log(\"board => \" + JSON.stringify(board));\r\n\r\n                this.setState({\r\n                    type : board.type,\r\n                    title : board.title,\r\n                    contents : board.contents,\r\n                    memberNo : board.memberNo\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n             <div>\r\n                <div className = \"container\">\r\n                    <div className = \"row\">\r\n                        <div className = \"card col-md-6 offset-md-3 offset-md-3\">\r\n                            {/* <h3 className=\"text-center\">새글을 작성 해주세요</h3> */    \r\n                                this.getTitle() // 신규 글인지 수정 글인지에 따라 호출\r\n                            }\r\n\r\n                            <div className = \"card-body\">\r\n                                <form>\r\n                                    <div className = \"form-group\">\r\n                                        <label> Type </label>\r\n                                        <select placeholder=\"type\" name=\"type\" className=\"form-control\" value={this.state.type} onChange={this.changeTypeHandler}>\r\n                                            <option value=\"1\">자유게시판</option>\r\n                                            <option value=\"2\">질문과 답변</option>\r\n                                        </select>\r\n                                    </div>\r\n                                    <div className = \"form-group\">\r\n                                        <label> Title </label>\r\n                                        <input type=\"text\" placeholder=\"title\" name=\"title\" className=\"form-control\" value={this.state.title} onChange={this.changeTitleHandler}/>\r\n                                    </div>\r\n                                    <div className = \"form-group\">\r\n                                        <label> Contents  </label>\r\n                                        <textarea placeholder=\"contents\" name=\"contents\" className=\"form-control\" value={this.state.contents} onChange={this.changeContentsHandler}/>\r\n                                    </div>\r\n                                    <div className = \"form-group\">\r\n                                        <label> MemberNo  </label>\r\n                                        <input placeholder=\"memberNo\" name=\"memberNo\" className=\"form-control\" value={this.state.memberNo} onChange={this.changeMemberNoHandler}/>\r\n                                    </div>\r\n                                    <button className=\"btn btn-success\" onClick={this.createBoard}>Save</button>\r\n                                    <button className=\"btn btn-danger\" onClick={this.cancel.bind(this)} style={{marginLeft:\"10px\"}}>Cancel</button>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CreateBoardComponent;","import React, { Component } from 'react';\r\nimport BoardService from '../service/BoardService';\r\n\r\nclass ReadBoardComponent extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            no : this.props.match.params.no,\r\n            board : {}\r\n        }\r\n\r\n    }\r\n\r\n    // 페이지가 로딩될 때  API 와 통신하여 글 객체를 받아와서 state에 담아준다.\r\n    componentDidMount(){\r\n        console.log(\"componentDidMount\");\r\n        BoardService.getOneBoard(this.state.no).then(res => {\r\n            console.log(JSON.stringify(res.data));\r\n            this.setState({board : res.data});\r\n        });\r\n    }\r\n\r\n\r\n    returnBoardType(typeNo){\r\n        let type = null;\r\n        \r\n        if(typeNo == 1){\r\n            type = \"자유게시판\";\r\n        } else if(typeNo == 2){\r\n            type = \"질문과 답변 게시판\";\r\n        } else {\r\n            type = \"타입 미지정\";\r\n        }\r\n\r\n        return (\r\n            <div className = \"row\">\r\n                <label>Board Type : </label> {type}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    returnDate(cTime, uTime){\r\n        return(\r\n            <div className = \"row\">\r\n                <label> 생성일 : [{cTime}] / 최종 수정일 : [{uTime}]</label>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    goToList(){\r\n        this.props.history.push('/board');\r\n    }\r\n\r\n    goToUpdate = (event) => {\r\n        event.preventDefault(); \r\n        this.props.history.push(`/create-board/${this.state.no}`);\r\n    }\r\n\r\n    deleteView = async function () {\r\n        if(window.confirm(\"정말로 글을 삭제하시겠습니까? \\n삭제된 글은 복구 할 수 없습니다.\")){\r\n            BoardService.deletBoard(this.state.no).then (res => {\r\n                console.log(\"delete result => \" + JSON.stringify(res));\r\n\r\n                if(res.status == 200){\r\n                    this.props.history.push('/board');\r\n                } else {\r\n                    alert(\"글 삭제가 실패했습니다.\");\r\n                }\r\n                \r\n            });\r\n        }\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className = \"card col-md-6 offset-md-3\">\r\n                <h3 className = \"text-center\"> Read Detail</h3>\r\n                <div className = \"card-body\">\r\n                    {/* 게시판 타입 호출 */}\r\n                    {this.returnBoardType(this.state.board.type)}\r\n                    \r\n                    <div className = \"row\">\r\n                        <label> Title </label> : {this.state.board.type}\r\n                    </div>\r\n\r\n                    <div className = \"row\">\r\n                        <label> Contents </label> : <br/>\r\n                        <textarea value={this.state.board.contents} readOnly></textarea>\r\n                    </div>\r\n                    <div className = \"row\">\r\n                        <label> MemberNo </label> :\r\n                        {this.state.board.memberNo}\r\n                    </div>\r\n\r\n                    {this.returnDate(this.state.board.createdTime, this.state.board.updateTime)}\r\n\r\n                    <button className=\"btn btn-primary\" onClick={this.goToList.bind(this)} style={{marginLeft : \"10px\"}}>글 목록</button>\r\n                    <button className=\"btn btn-info\" onClick={this.goToUpdate.bind(this)} style={{marginLeft : \"10px\"}}>글 수정하기</button>\r\n                    <button className=\"btn btn-danger\" onClick={() => this.deleteView()}  style={{marginLeft : \"10px\"}}>글 삭제하기</button>\r\n                </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ReadBoardComponent;","// 의존하는 패키지 및 최상위 컴포넌트 정리\nimport './App.css';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport ListBoardComponent from './components/ListBoardComponent';\nimport HeaderComponent from './components/HeaderComponent';\nimport FooterComponent from './components/FooterComponent';\nimport CreateBoardComponent from './components/CreateBoradComponent';\nimport ReadBoardComponent from './components/ReadBoardComponent';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// App() 함수에 최상위 컴포넌 트 정리\nfunction App() {\n  return (\n    <div>\n        <Router> {/* react-route 적용 대상의 컴포넌트를 Router로 감싼다. */}\n          <HeaderComponent/> {/*웹페이지 헤더 컴포넌트 정의 */}\n            <div className='container'> \n              <Switch>\n                <Route path=\"/\" exact component = {ListBoardComponent}></Route>\n                <Route path=\"/board\" component = {ListBoardComponent}></Route>\n                <Route path=\"/create-board/:no\" component = {CreateBoardComponent}></Route>\n                <Route path=\"/read-board/:no\" component = {ReadBoardComponent}></Route>\n              </Switch>\n            </div>\n            <FooterComponent/>\n        </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />                           {/*index.js 에서 App.js의 내용을*/}\n  </React.StrictMode>,\n  document.getElementById('root') // id값이 root인 곳에 랜더링 시켜줌\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}